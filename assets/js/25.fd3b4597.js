(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{396:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"首屏加载优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首屏加载优化"}},[t._v("#")]),t._v(" 首屏加载优化")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("preload（提高优先级，优先加载本页资源）、prefetch（降低优先级，提前加载可能用到的资源）")])]),t._v(" "),a("li",[a("p",[t._v("利用LocalStorage缓存资源")])]),t._v(" "),a("li",[a("p",[t._v("图片资源压缩，icon资源使用雪碧图")])])]),t._v(" "),a("h4",{attrs:{id:"对于vue项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于vue项目"}},[t._v("#")]),t._v(" 对于vue项目：")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("分离打包，对于第三方js库的打包优化。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("生产环境是内网的话，把资源放内网，通过静态文件引入，如果有外网的话，通过CDN方式引入，不用占用访问外网的带宽，可以节省流量，通过CDN加速。")])]),t._v(" "),a("li",[a("p",[t._v("利用webpack的externals设置外部拓展，使代码编译成通过require运行时加载资源，防止将一些import的第三方资源打包到bundle中。再通过CDN去引入这些资源，可以直接通过全局变量访问，省去import引入和Vue.use注册。")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  externals"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vuex'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vuex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue-router'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'VueRouter'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'element-ui'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ELEMENT'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// element-ui 变量名要使用 ELEMENT，因为element-ui的 umd 模块名是 ELEMENT")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("代码分离，把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。")])]),t._v(" "),a("p",[t._v("通常我们使用 SplitChunksPlugin 去重和分离 chunk。")]),t._v(" "),a("p",[t._v("SplitChunksPlugin 插件可以将公共的依赖模块提取到已有的 entry chunk 中，或者提取到一个新生成的 chunk。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** chunks\n       * 表示哪些代码需要优化，有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为async\n       * initial, all模式会将所有来自node_modules的模块分配到一个叫vendors的缓存组；\n       * 所有重复引用至少两次的代码，会被分配到default的缓存组。\n       * initial模式下会分开优化打包异步和非异步模块，而all会把异步和非异步同时进行优化打包。\n       * 也就是说moduleA在indexA中异步引入，indexB中同步引入，initial下moduleA会出现在两个打包块中，而all只会出现一个。\n       * **/")]),t._v("\n      chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      minSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示在压缩前的最小模块大小，默认为30000")]),t._v("\n      minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示被引用次数，默认为1")]),t._v("\n      maxAsyncRequests"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按需加载时候最大的并行请求数，默认为5")]),t._v("\n      maxInitialRequests"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个入口最大的并行请求数，默认为3")]),t._v("\n      automaticNameDelimiter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'~'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命名连接符")]),t._v("\n      name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拆分出来块的名字，默认由块名和hash值自动生成")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 缓存组\n       * 缓存组的属性除上面所有属性外，还有test, priority, reuseExistingChunk\n          test: 用于控制哪些模块被这个缓存组匹配到\n          priority: 缓存组打包的先后优先级\n          reuseExistingChunk: 如果当前代码块包含的模块已经有了，就不在产生一个新的代码块\n       * 可以通过配置optimization.splitChunks.cacheGroups.default: false禁用default缓存组\n      **/")]),t._v("\n      cacheGroups"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引自 https://juejin.cn/post/6844903680307625997")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("vue-router使用懒加载，访问到当前页面才会加载相关资源")])]),t._v(" "),a("p",[a("code",[t._v('component: resolve => require(["@/views/version/versionManage.vue"], resolve)')])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("开启gizp压缩，引入webpack plugin "),a("code",[t._v("compression-webpack-plugin")])])]),t._v(" "),a("blockquote",[a("p",[t._v("gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。\nhtml、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。\n前端配置gzip压缩，并且服务端使用nginx开启gzip，用来减小网络传输的流量大小。")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[t._v("引入webpack plugin "),a("code",[t._v("uglifyjs-webpack-plugin")])])]),t._v(" "),a("li",[a("p",[t._v("引入webpack plugin "),a("code",[t._v("mini-xss-extract-plugin")]),t._v("提取CSS到单独的文件, 并使用"),a("code",[t._v("optimize-css-assets-webpack-plugin")]),t._v("来压缩CSS文件")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);